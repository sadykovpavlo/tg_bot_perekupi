import asyncio
import time

from environs import Env
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, StateFilter, Text, BaseFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, Message, KeyboardButton, ReplyKeyboardMarkup,
                           ReplyKeyboardRemove)
from aiogram.types import InputMediaPhoto, InputMediaVideo


env = Env()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ Env
env.read_env()  # –ú–µ—Ç–æ–¥–æ–º read_env() —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª .env –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –Ω–µ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
bot_token = env('BOT_TOKEN')  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é bot_token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MemoryStorage)
storage: MemoryStorage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(bot_token)
dp: Dispatcher = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º "–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_dict: dict[int, dict[str, str | int | bool]] = {}


class PhotoFilter(BaseFilter):

    async def __call__(self, message: Message, state: FSMContext):
        user_dict[message.from_user.id] = await state.get_data()
        if user_dict[message.from_user.id]["photo"]:
            if len(user_dict[message.from_user.id]["photo"]) >= 4:
                return True
            else:
                return False
        else:
            return False


class MediaGroupFilter(BaseFilter):
    async def __call__(self, massage: Message):
        if massage.media_group_id:
            return True

        # C–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç StatesGroup, –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—à–µ–π FSM


class FSMFillCarInfo(StatesGroup):
    fill_model = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∞–≤—Ç–æ
    fill_year_of_build = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞ –∞–≤—Ç–æ
    fill_engine_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –¥–≤–∏–≥–∞—Ç–µ–ª—è
    fill_capacity = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –æ–±—å–µ–º–∞ –∏–ª–∏ –º–æ–∂–Ω–æ—Å—Ç–∏
    fill_gear_box_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –∫–æ—Ä–æ–±–∫–∏
    fill_vin_or_numbers = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –±—ã–ª–∏ –ª–∏ –î–¢–ü
    confirm_vin_state = State()
    upload_photo = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    upload_video_question = State()
    upload_video = State()
    fill_some_info = State()
    fill_contact_info = State()  # That state activate if user doesn't have user_name
    fill_price = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∞–≤—Ç–æ


@dp.message(StateFilter(default_state), ~Command(commands=['help', 'fillform', 'cancel']), ~CommandStart())
async def answer_for_any_message(message: Message):
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç!\n\n'
                              '–©–æ–± –ø—Ä–æ–¥–∞—Ç–∏ —Å–≤–æ—î –∞–≤—Ç–æ - '
                              '–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /fillform')


@dp.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message):
    start_button = InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ  üöó',
                                        callback_data='fillform')
    keyboard: list[list[InlineKeyboardButton]] = [[start_button]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç! –Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è',
                               reply_markup=markup)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text='–í–∏ –ø–µ—Ä–µ—Ä–≤–∞–ª–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏\n\n'
                              '–î–ª—è —Ç–æ–≥–æ —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ - '
                              '–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /fillform')
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ–æ–±—â–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(text='–í–∏ —â–µ –Ω–µ –ø–æ—á–∞–ª–∏ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É.\n\n'
                              '–©–æ–± –ø–æ—á–∞—Ç–∏ - '
                              '–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /fillform')


@dp.message(Command(commands='help'))
async def process_of_help(message: Message):
    await message.answer(text='–©–æ–± –ø–æ—á–∞—Ç–∏ - '
                              '–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /fillform\n'
                              '–©–æ–± –ø–µ—Ä–µ–≤–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /cancel ')


@dp.message(Command(commands='fillform'), StateFilter(default_state))
async def fillform_comand_message(message: Message):
    start_button = InlineKeyboardButton(text='–•–æ—á—É –ø—Ä–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ  üöó',
                                        callback_data='fillform')
    keyboard: list[list[InlineKeyboardButton]] = [[start_button]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text='–ü—Ä–∏–≤—ñ—Ç! –Ø–∫—â–æ —Ö–æ—á–µ—à –ø—Ä–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è',
                         reply_markup=markup)


@dp.message(Command(commands='fillform'), ~StateFilter(default_state))
async def fillform_comand_message_not_def(message: Message):
    await message.answer(text='–í–∏ –≤–∂–µ –ø–æ—á–∞–ª–∏ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É.\n'
                              '–©–æ–± –ø–µ—Ä–µ–≤–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /cancel ')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /fillform
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ
@dp.callback_query(Text(text='fillform'), StateFilter(default_state))
async def process_fillform_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º')
    await state.set_state(FSMFillCarInfo.fill_model)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /fillform
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∞—Ä–∫–∏ –∏ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ
@dp.callback_query(Text(text='fillform'), ~StateFilter(default_state))
async def process_fillform_command_not_default(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(text="–í–∏ –≤–∂–µ –ø–æ—á–∞–ª–∏ –∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏ —Ñ–æ—Ä–º—É.\n"
                                       "–©–æ–± –ø–µ—Ä–µ–≤–∞—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å -> /cancel ")


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞ –≤–∏–ø—É—Å–∫–∞ –∞–≤—Ç–æ

@dp.message(StateFilter(FSMFillCarInfo.fill_model), lambda massage: len(massage.text) >= 4, ~Text(text=['/fillform',
                                                                                                        '/start']))
async def process_name_sent(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "model"
    await state.update_data(model=message.text,
                            user_url=message.from_user.username,
                            user_name=message.from_user.full_name)
    await message.answer(text='–î—è–∫—É—é!\n\n–Ω–∞–ø–∏—à—ñ—Ç—å —Ä—ñ–∫ –≤–∏–ø—É—Å–∫—É –∞–≤—Ç–æ')

    await state.set_state(FSMFillCarInfo.fill_year_of_build)


@dp.message(StateFilter(FSMFillCarInfo.fill_year_of_build), F.text)
async def process_year_of_build_sent(message: Message, state: FSMContext):
    await state.update_data(year_of_build=message.text)
    await message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å —Ç–∏–ø –ø–∞–ª–∏–≤–∞ –¥–≤–∏–≥—É–Ω–∞\n'
                              '–ê–±–æ –µ–ª–µ—Ç–∫—Ä–æ —á–∏ –≥—ñ–±—Ä–∏—Ç')
    await state.set_state(FSMFillCarInfo.fill_engine_type)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillCarInfo.fill_model))
async def warning_not_name(message: Message):
    await message.answer(text='–¢–µ —â–æ –≤–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –º–∞—Ä–∫—É —Ç–∞ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ\n\n'
                              '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n\n'
                              '–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–∏–º–≤–æ–ª—ñ–≤ - 4\n\n'
                              '–î–ª—è –≤—ñ–¥–º—ñ–Ω–∏ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ - '
                              '–≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel')


@dp.message(StateFilter(FSMFillCarInfo.fill_engine_type), F.text)
async def process_engine_type_sent(message: Message, state: FSMContext):
    await state.update_data(engine_type=message.text)
    await message.answer(text='–î—è–∫—É—é! –¢–µ–ø–µ—Ä –Ω–∞–ø–∏—à–∏—Ç—å –æ–± º—î–º –¥–≤–∏–≥—É–Ω–∞ / –¥–ª—è –µ–ª–µ–∫—Ç—Ä–æ –∫—ñ–ª—å–∫—ñ—Ç—å –∫–í—Ç')
    await state.set_state(FSMFillCarInfo.fill_capacity)


@dp.message(StateFilter(FSMFillCarInfo.fill_capacity), F.text)
async def process_of_add_capacity(message: Message, state: FSMContext):
    await state.update_data(engine_capacity=message.text)
    # buttons
    await message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å —Ç–∏–ø –∫–æ—Ä–æ–±–∫–∏ –ø–µ—Ä–µ–¥–∞—á')
    await state.set_state(FSMFillCarInfo.fill_gear_box_type)


# that handler will work if add correct type of gearbox
@dp.message(StateFilter(FSMFillCarInfo.fill_gear_box_type))
async def process_fill_gear_box_type(message: Message, state: FSMContext):
    await state.update_data(gear_box=message.text)
    await message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å VIN –∞–±–æ –¥–µ—Ä–∂–∞–≤–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ: ', )
    await state.set_state(FSMFillCarInfo.fill_vin_or_numbers)


#########################################################################################


# That will star if correct ansfer for gearbox
@dp.message(StateFilter(FSMFillCarInfo.fill_vin_or_numbers), lambda massage: len(massage.text) >= 5)
async def process_vin_or_number(message: Message, state: FSMContext):
    await state.update_data(vin_or_num=message.text)
    yes_but = InlineKeyboardButton(text='–í—ñ—Ä–Ω–æ ‚úÖ',
                                   callback_data='yes')
    no_but = InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ —â–µ —Ä–∞–∑ üîÅ',
                                  callback_data='no')
    keyboard: list[list[InlineKeyboardButton]] = [
        [yes_but, no_but]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text=f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–Ω–∏—Ö {message.text}",
                         reply_markup=markup)
    await state.set_state(FSMFillCarInfo.confirm_vin_state)


@dp.callback_query(StateFilter(FSMFillCarInfo.confirm_vin_state), Text(text=['yes', 'no']))
async def confirm_vin(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'yes':
        await callback.message.delete()
        await callback.message.answer(text='–î–æ–¥–∞–π—Ç–µ –≤—ñ–¥ 4 –¥–æ 10 —Ñ–æ—Ç–æ')
        await state.set_state(FSMFillCarInfo.upload_photo)
    elif callback.data == 'no':
        await callback.message.delete()
        await callback.message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å VIN –∞–±–æ –¥–µ—Ä–∂–∞–≤–Ω–∏–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ: ')
        await state.set_state(FSMFillCarInfo.fill_vin_or_numbers)


@dp.message(StateFilter(FSMFillCarInfo.fill_vin_or_numbers))
async def incorrect_num_or_vin(message: Message):
    await message.answer(text="–í–∏–±–∞—á—Ç–µ, —Ü–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä —á–∏ VIN\n"
                              "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")


@dp.callback_query(StateFilter(FSMFillCarInfo.confirm_vin_state))
async def confirm_vin_error(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í–∏ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–µ–ª–∏ –∫–æ—Ä—Ä–µ–∫–Ω—ñ—Å—Ç—å –¥–∞–Ω–Ω–∏—Ö\n'
                                       '–í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –≤–∏—â–µ.')


# –ü—Ä—Ü–µ—Å—Å –¥–æ–±–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ/ —Å–µ–π—á–∞—Å –µ—Å—Ç—å –±–∞–≥–∞ –µ—Å–ª–∏ –¥–æ–±–∞–ª—è—Ç—å –≤—Å–µ —Ñ–æ—Ç–æ —Ä–∞–∑–æ–º —Ç–æ —É –Ω–∞—Å –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –æ —Ç–æ–º —á—Ç–æ –¥–æ–±–∞–≤—å —Ñ–æ—Ç–æ
# –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Ö–æ—á–µ—Ç –ª–∏ –µ—â–µ —Ñ–æ—Ç–æ —é–∑–µ—Ä
@dp.message(StateFilter(FSMFillCarInfo.upload_photo),
            F.photo[-1].as_('largest_photo'))
async def process_photo_sent(message: Message,
                             state: FSMContext,
                             ):
    data = await state.get_data()
    if 'photos' in data:
        data['photos'].append(message.photo[-1].file_id)
    if 'photos' not in data:
        await state.update_data(photos=[])
        data = await state.get_data()
        data['photos'].append(message.photo[-1].file_id)
    if len(data['photos']) < 4:
        await state.update_data(photos=data["photos"])

    elif len(data['photos']) < 11:
        await state.update_data(photos=data["photos"])
        button_stop: KeyboardButton = KeyboardButton(text='–ë—ñ–ª—å—à–µ –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ üõë')
        keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
            keyboard=[[button_stop]], resize_keyboard=True)
        await message.answer(reply_markup=keyboard, text='–í–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ —â–µ —Ñ–æ—Ç–æ\n'
                                                         '–Ø–∫—â–æ –≤–∏ –Ω–µ –±–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞–≤–∞—Ç–∏ –±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å  '
                                                         '\n"–ë—ñ–ª—å—à–µ –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ üõë"')



    elif len(data['photos']) >= 10:
        await message.answer(text="–í–∏ –¥–æ–¥–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ–æ—Ç–æ!", reply_markup=ReplyKeyboardRemove())
        yes_but = InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ ‚úÖ",
                                       callback_data='yes')
        no_but = InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ‚û°Ô∏è',
                                      callback_data='no')
        keyboard: list[list[InlineKeyboardButton]] = [
            [yes_but, no_but]]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer(text="–ß–∏ –±–∞–∂–∞—î—Ç–µ –í–∏ –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ–æ–≥–ª—è–¥ –∞–≤—Ç–æ?",
                             reply_markup=markup)
        await state.set_state(FSMFillCarInfo.upload_video_question)


@dp.message(StateFilter(FSMFillCarInfo.upload_photo),
            Text(text='–ë—ñ–ª—å—à–µ –Ω–µ –¥–æ–¥–∞–≤–∞—Ç–∏ üõë'))
async def process_of_change_state_to_fill_price(message: Message, state: FSMContext):
    await message.answer(text="–§–æ—Ç–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ.",
                         reply_markup=ReplyKeyboardRemove())
    yes_but = InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ ‚úÖ",
                                   callback_data='yes')
    no_but = InlineKeyboardButton(text='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ ‚û°Ô∏è',
                                  callback_data='no')
    keyboard: list[list[InlineKeyboardButton]] = [
        [yes_but, no_but]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text="–ß–∏ –±–∞–∂–∞—î—Ç–µ –í–∏ –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–µ–æ–æ–≥–ª—è–¥ –∞–≤—Ç–æ?",
                         reply_markup=markup)

    await state.set_state(FSMFillCarInfo.upload_video_question)


@dp.callback_query(StateFilter(FSMFillCarInfo.upload_video_question), Text(text=['yes', 'no']))
async def process_of_upload_video_question(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'yes':
        await callback.message.delete()
        await callback.message.answer(text='–î–æ–¥–∞–π—Ç–µ –≤—ñ–¥–µ–æ: ')
        await state.set_state(FSMFillCarInfo.upload_video)
    elif callback.data == 'no':
        await callback.message.delete()
        await callback.message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ –≤–∞—à–µ –∞–≤—Ç–æ(–ø—ñ–¥–∫—Ä–∞—Å–∏, —Å—Ç–∞–Ω –∫—É–∑–æ–≤—É, —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω,'
                                           ' –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è, –ø—Ä–æ–±—ñ–≥)')
        await state.set_state(FSMFillCarInfo.fill_some_info)


@dp.message(StateFilter(FSMFillCarInfo.upload_photo))
async def error_upload_photo(message: Message):
    await message.answer(text="–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ.\n"
                              "–î–æ–¥–æ–π—Ç–µ –≤—ñ–¥ 4 –¥–æ 10 —Ñ–æ—Ç–æ")


@dp.message(StateFilter(FSMFillCarInfo.upload_video), F.video)
async def process_of_upload_video(message: Message, state: FSMContext):
    await state.update_data(video=message.video.file_id)
    await message.answer(text='–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ –≤–∞—à–µ –∞–≤—Ç–æ(–ø—ñ–¥–∫—Ä–∞—Å–∏, —Å—Ç–∞–Ω –∫—É–∑–æ–≤—É, —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω,'
                              ' –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è, –ø—Ä–æ–±—ñ–≥)')
    await state.set_state(FSMFillCarInfo.fill_some_info)


@dp.message(StateFilter(FSMFillCarInfo.upload_video))
async def error_vidoe_upload(message: Message):
    await message.answer(text='–¶–µ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ –≤—ñ–¥–µ–æ.\n'
                              '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.')


@dp.message(StateFilter(FSMFillCarInfo.fill_some_info), F.text)
async def process_adding_some_info(message: Message, state: FSMContext):
    await state.update_data(car_info=message.text)
    await message.answer(text='–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É: ')
    await state.set_state(FSMFillCarInfo.fill_price)


@dp.message(StateFilter(FSMFillCarInfo.fill_some_info))
async def error_info_filling(message: Message):
    await message.answer(text="–ù–∞–ø–∏—à—ñ—Ç—å –¥–µ–∫—ñ–ª—å–∫–∞ —Å–ª—ñ–≤ –ø—Ä–æ –≤–∞—à–µ –∞–≤—Ç–æ(–ø—ñ–¥–∫—Ä–∞—Å–∏, —Å—Ç–∞–Ω –∫—É–∑–æ–≤—É, —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π —Å—Ç–∞–Ω, "
                              "–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü—ñ—è, –ø—Ä–æ–±—ñ–≥):")


@dp.message(StateFilter(FSMFillCarInfo.fill_price), F.text)
async def process_fill_price(message: Message,
                             state: FSMContext):
    await state.update_data(price=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    if user_dict[message.from_user.id]["user_url"]:
        await message.answer(text='–î—è–∫—É—é. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏')
        start_button = InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ üîÑ',
                                            callback_data='fillform')
        keyboard: list[list[InlineKeyboardButton]] = [[start_button]]
        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        await message.answer(text="–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ - –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=markup)
        await state.clear()
        caption = f'–Ü–º º—è: {user_dict[message.from_user.id]["user_name"]}\n–ö–æ–Ω—Ç–∞–∫—Ç: @{user_dict[message.from_user.id]["user_url"]}\n–ê–≤—Ç–æ: {user_dict[message.from_user.id]["model"]}\n–î–≤–∏–≥—É–Ω(–¢–∏–ø/–ü–∞–ª–∏–≤–æ): {user_dict[message.from_user.id]["engine_type"]}\n–û–± º—î–º: {user_dict[message.from_user.id]["engine_capacity"]}\n–ö–æ—Ä–æ–±–∫–∞: {user_dict[message.from_user.id]["gear_box"]}\n–†—ñ–∫: {user_dict[message.from_user.id]["year_of_build"]}\nVIN/–ù–æ–º–µ—Ä: {user_dict[message.from_user.id]["vin_or_num"]}\n–¶—ñ–Ω–∞: {user_dict[message.from_user.id]["price"]}\n–ü—Ä–æ –∞–≤—Ç–æ: {user_dict[message.from_user.id]["car_info"]}'
        media: list = []
        if "video" in user_dict[message.from_user.id]:
            video_media = InputMediaVideo(media=user_dict[message.from_user.id]['video'])
            media.append(video_media)
        photo_media = InputMediaPhoto(media=user_dict[message.from_user.id]["photos"][0], caption=caption)
        media.append(photo_media)
        object_photos = user_dict[message.from_user.id]["photos"][1:9]
        for object_photo in object_photos:
            photo_media = InputMediaPhoto(media=object_photo)
            media.append(photo_media)

        await bot.send_media_group(chat_id='-1001717002913', media=media)
        media = []
    else:
        await message.answer(text='–í–∫–∞–∂—ñ—Ç—å –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä')
        await state.set_state(FSMFillCarInfo.fill_contact_info)


@dp.message(StateFilter(FSMFillCarInfo.fill_price))
async def error_for_price(message: Message):
    await message.answer(text="–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É: ")


# This handler works if user doesn`t have user_name and added valid number
@dp.message(StateFilter(FSMFillCarInfo.fill_contact_info), F.text,
            lambda x: x.text.isdigit() and 10 <= len(x.text) <= 12)
async def process_add_contact(message: Message, state: FSMContext):
    await state.update_data(contact=message.text)
    user_dict[message.from_user.id] = await state.get_data()
    await message.answer(text='–î—è–∫—É—é. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤ º—è–∂–µ—Ç—å—Å—è –∑ –≤–∞–º–∏')
    start_button = InlineKeyboardButton(text='–ü–æ–≤—Ç–æ—Ä–∏—Ç–∏ üîÑ',
                                        callback_data='fillform')
    keyboard: list[list[InlineKeyboardButton]] = [[start_button]]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(text="–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ—ó –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º–∏ - –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è", reply_markup=markup)
    await state.clear()
    caption = f'–Ü–º º—è: {user_dict[message.from_user.id]["user_name"]}\n–ö–æ–Ω—Ç–∞–∫—Ç: {user_dict[message.from_user.id]["contact"]}\n–ê–≤—Ç–æ: {user_dict[message.from_user.id]["model"]}\n–î–≤–∏–≥—É–Ω(–¢–∏–ø/–ü–∞–ª–∏–≤–æ): {user_dict[message.from_user.id]["engine_type"]}\n–û–± º—î–º: {user_dict[message.from_user.id]["engine_capacity"]}\n–ö–æ—Ä–æ–±–∫–∞: {user_dict[message.from_user.id]["gear_box"]}\n–†—ñ–∫: {user_dict[message.from_user.id]["year_of_build"]}\nVIN/–ù–æ–º–µ—Ä: {user_dict[message.from_user.id]["vin_or_num"]}\n–¶—ñ–Ω–∞: {user_dict[message.from_user.id]["price"]}\n–ü—Ä–æ –∞–≤—Ç–æ: {user_dict[message.from_user.id]["car_info"]}'
    media: list = []
    if "video" in user_dict[message.from_user.id]:
        video_media = InputMediaVideo(media=user_dict[message.from_user.id]['video'])
        media.append(video_media)
    photo_media = InputMediaPhoto(media=user_dict[message.from_user.id]["photos"][0], caption=caption)
    media.append(photo_media)
    object_photos = user_dict[message.from_user.id]["photos"][1:9]
    for object_photo in object_photos:
        photo_media = InputMediaPhoto(media=object_photo)

        media.append(photo_media)

    await bot.send_media_group(chat_id='-1001717002913', media=media)
    media = []


# Handler works when user sent not valid number
@dp.message(StateFilter(FSMFillCarInfo.fill_contact_info))
async def invalid_number(message: Message):
    await message.answer(text="–°—Ö–æ–∂–µ –í–∏ –≤–≤–µ–ª–∏ –Ω–µ –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä.\n"
                              "–ù–æ–º–µ—Ä –º–∞—î —Å–∫–ª–∞–¥–∞—Ç–∏ –≤—ñ–¥ 10 –¥–æ 12 —Å–∏–º–≤–æ–ª—ñ–≤\n"
                              "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑\n"
                              "–Ø–∫—â–æ –≤–∏ –≤–≤–æ–¥–∏–ª–∏ –ø—á–∏–Ω–∞—é—á–∏ –∑  º+ º, –ø—Ä–∏–±–µ—Ä—ñ—Ç—å  º+ º")


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
    dp.run_polling(bot)
